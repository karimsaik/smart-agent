var jasmine = require("/modules/jasmine/boot");
var directoryModule = require("/smart-agent/services/directory");
var util = require("./util");

jasmine.describe("TestDirectory", function() {

    var config = {
        isMaster: false
    };
    
    var descriptorPath = "./swagger2/valid-descriptor.json";
    var directory = new directoryModule.Directory(config);
	var descriptor = require(descriptorPath).desc;
    
    jasmine.beforeAll(function(){

    }); 

    jasmine.beforeEach(function() {

    });
    
    jasmine.afterAll(function() {
       util.deleteDocument(descriptor["x-node-id"]);           
    });

    jasmine.it("test register service", function() {

        try {
            
            var listBeforeAdd = util.listDocumentsOfType("service_descriptor", true);           
            directory.register(descriptor);
            
            // check if descriptor document with expected key was created
            util.getDocument(descriptor["x-node-id"]);
            
            // check that we have n + 1 service descriptor
            var listAfterAdd = util.listDocumentsOfType("service_descriptor", true);
            jasmine.expect(listAfterAdd.length).toBe(listBeforeAdd.length + 1);
        }catch(exception){
            jasmine.fail(JSON.stringify(exception));
        }
    });

    jasmine.it("test register service", function() {

        try {
            
            directory.register(descriptor);
            // check if descriptor document with expected key was created
            util.getDocument(descriptor["x-node-id"]);
        }catch(exception){
            jasmine.fail(JSON.stringify(exception));
        }
    });

	jasmine.it("test list services by category", function() {

        try {
            
            var filter = {
                category: "temperature"
            };            
            
            var list = directory.listServices(filter);
            jasmine.expect(list).not.toBeNull(null);
            jasmine.expect(list.length).toBe(1);
            jasmine.expect(list[0]["x-node-id"]).toBe("edge-node-001");
        }catch(exception){
            jasmine.fail(JSON.stringify(exception));
        }
    });    
    
    jasmine.it("test list services by protocol", function() {

        try {
            
            var filter = {
                protocol: "mqtt"
            };
            
            var list = directory.listServices(filter);
            jasmine.expect(list).not.toBeNull(null);
            jasmine.expect(list.length).toBe(1);
            jasmine.expect(list[0]["x-node-id"]).toBe("edge-node-001");
        }catch(exception){
            jasmine.fail(JSON.stringify(exception));
        }
    });    
    
    jasmine.it("test list services by node id", function() {

        try {
            
            var filter = {
                nodeId: descriptor["x-node-id"]
            };
            
            var list = directory.listServices(filter);
            jasmine.expect(list).not.toBeNull(null);
            jasmine.expect(list.length).toBe(1);
            jasmine.expect(list[0]["x-node-id"]).toBe("edge-node-001");
        }catch(exception){
            jasmine.fail(JSON.stringify(exception));
        }
    });
    
    jasmine.it("test get service by key", function() {

        try {
            
            var serviceDesc = directory.getService(descriptor["x-node-id"]);
            jasmine.expect(descriptor).not.toBeNull();          
            jasmine.expect(serviceDesc["x-node-id"]).toBe(descriptor["x-node-id"]);            
        }catch(exception){
            jasmine.fail(JSON.stringify(exception));
        }
    });
});

jasmine.execute();