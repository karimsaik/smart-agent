const HTTP_ENDPOINT = "https://api.scriptrapps.io";
const MQTT_ENDPOINT = "mqtts://mqtt.scriptr.io";
const PROXY_FOLDER = "smart-agent/proxies/";
const SCRIPT_CONTENT_TYPE = "application/vnd.scriptr-javascript";
const MODULE = "_module";
const HTTP_BASED = "scriptrapps.io";
const MQTT_BASED = "scriptr.io";
var constants = require("/smart-agent/common/constants");
var config = require("smart-agent/setup/config");
var log = require("log");
log.setLevel("debug");

/**
 * This class is used to obtain instances of proxies to remote services
 * @class ProxyFactory
 * @constructor
 */
function ProxyFactory() {

}

/**
 * A specific getProxy method that returns a proxy of the master agent of the current node
 * @method getMasterAgentProxy
 * @return {Object} master agent proxy
 * @throw {Error} : if the current agent is a master agent
 */
ProxyFactory.prototype.getMasterAgentProxy = function(config) {

    log.debug("getMasterAgentProxy role: " + config.role);
    if(config.role == "master"){
        throw{
            errorCode: "Role not allowed",
            errorDetail: "Node cannot be master"
        }
    }
    try{
        var masterDescriptor = config.masterNodeDescriptor;
        log.info("masterDescriptor: \n" + JSON.stringify(masterDescriptor));
        var initParams = {
            token: config.masterAgent.token,
            username: config.masterAgent.username,
            password: config.masterAgent.password
        };
        log.info("initParams: \n" + JSON.stringify(initParams));
        log.info("Now excecuting getProxy");
        return this.getProxy(masterDescriptor, initParams);
    }catch(exception){
        return exception;
    }
};

/**
 * @method getProxy
 * @param {Object} descriptor: descriptor of the remote service
 * @param {Object} initParams: initialization parameters, as expected by the constructor of the proxy (token, username, password)
 * @return {Object} instance of a proxy
 */
ProxyFactory.prototype.getProxy = function(descriptor, initParams) {

    log.info("ProxyFactory.getProxy");
    if (!descriptor) {

        throw {
            errorCode: constants.MISSING_PARAMETER_CODE,
            errorDetail:  "descriptor" + constants.MISSING_PARAMETER_MSG
        };
    }

    if (!initParams) {

        throw {
            errorCode: constants.MISSING_PARAMETER_CODE,
            errorDetail:  "initParams" + constants.MISSING_PARAMETER_MSG
        };
    }

    var className = this.getClassNameFromDescriptor(descriptor);
    log.info("Class name: " + className);
    if (!this.proxyExists(className)) {
        log.error("In ProxyFactory.getProxy proxy does no exist");
        this.generateProxy(descriptor);
    }
    log.info("In ProxyFactory.getProxy proxy exists");
    var proxyModule = require(PROXY_FOLDER + className + MODULE);
    return new proxyModule[className](initParams);
};

/**
 * @method proxyExists
 * @param {String} className: the name of a proxy class
 * @return {Boolean} true if proxy script exists (already generated in /proxies), false otherwise
 */
ProxyFactory.prototype.proxyExists = function(className) {

    var params = {

        "apsdb.name": PROXY_FOLDER + className + MODULE,
        "apsdb.scope": "app"        
    };

    var resp = apsdb.callApi("GetFileContent", params, null);
    if (resp.metadata.status == "failure") {

        if (resp.metadata.errorCode == "FILE_NOT_FOUND") {
            return false;
        }else {
            throw resp;
        }
    }

    return true;
};

/**
 * Generate a proxy class name based on descriptor's data (field x-node-id)
 * @method getClassNameFromDescriptor
 * @param {Object} descriptor: descriptor of the remote service
 * @return {String} proxy class name
 */
ProxyFactory.prototype.getClassNameFromDescriptor = function(descriptor) {

    var className = descriptor["x-node-id"];
    className = className.replace(/\-/g, "_");
    className = className.replace(/\./g, "_");   
    return className
};

/**
 * Generate a proxy script + class based on a remote service descriptor. Proxies can be used
 * by local scripts to invoke remote services as if they were local objects.
 * The proxy script is saved in /smart-agent/proxies
 * @method generateProxy
 * @param {Object} descriptor: descriptor of the remote service 
 */
ProxyFactory.prototype.generateProxy = function(descriptor) {

    var className = this.getClassNameFromDescriptor(descriptor);
    var endpoints = this.getEnpointsFromDescriptor(descriptor);
    var moduleDefStr = "var http = require('http');\n";
    moduleDefStr += "var mqtt = require('mqtt');\n";
    var classDefStr = "function " + className + "(dto){\n";
    classDefStr += "\tif (!dto || !dto.token || !dto.username || !dto.password){\n";
    classDefStr += "\t\tthrow {\n";
    classDefStr += "\t\t\terrorCode:'Missing_Parameter',\n"; 
    classDefStr += "\t\t\terrorDetail:'dto.token, dto.username, dto.password should be defined'\n";
    classDefStr += "\t\t};\n";
    classDefStr += "\t}\n";
    classDefStr += "\tthis.httpEndpoint = '" + (endpoints.http ? "https://" + endpoints.http : HTTP_ENDPOINT) + "';\n";
    classDefStr += "\tthis.mqttEndpoint = '" + (endpoints.mqtt ? "mqtt://" + endpoints.mqtt : MQTT_ENDPOINT) + "';\n";
    classDefStr += "\tthis.supportedProtocols = " + JSON.stringify(descriptor["x-protocols"]) + ";\n"; 
    classDefStr += "\tthis.token = dto.token;\n\tthis.username = dto.username;\n\tthis.password = dto.password\n";  
    classDefStr += "}\n"
    classDefStr += this.generateMethods(className, descriptor.paths) + "\n";
    classDefStr += this.generateHttpCaller(className) + "\n";
    classDefStr += this.generateMQTTCaller(className) + "\n";
    moduleDefStr = moduleDefStr + classDefStr; 
    return this.saveProxy(className + "_module", moduleDefStr);
};

/**
 * Generate methods to add to the proxy being generated in this.generateProxy, based on the path object of the server's descriptor
 * @method generateMethods
 * @param {String} name: the class name of the proxy
 * @param {Object} path: all of paths listed in the path object of the descriptor
 * @return {String} a set of methods
 */
ProxyFactory.prototype.generateMethods = function(name, path) {

    var keys = Object.keys(path);
    var functionStr = "";
    for (var i = 0; i < keys.length; i++) {

        var fctName = keys[i].substring(1);  // path to script
        var slashIndex = fctName.lastIndexOf("/");
        var fctNameUpper = fctName.substring(slashIndex > -1 ? slashIndex + 1 : 0);
        fctNameUpper = fctNameUpper.substring(0, 1).toUpperCase() + fctNameUpper.substring(1);

        if (path[keys[i]].hasOwnProperty("get")) {

            functionStr += name + ".prototype.get" + fctNameUpper + " = function(params, callback){\n";
            functionStr += this.addParametersValidation(path[keys[i]], "get");
            functionStr += "\treturn this.sendHttpRequest(params, '" + keys[i] + "', 'get');\n"
            functionStr += "};\n"
        }  

        if (path[keys[i]].hasOwnProperty("post")) {

            var contentType = path[keys[i]].post.consumes[0];
            functionStr += name + ".prototype.set" + fctNameUpper + " = function(params, callback){\n";
            functionStr += this.addParametersValidation(path[keys[i]], "post");
            functionStr +=  
                "\tif(this.supportedProtocols[0].toLowerCase() == 'mqtt'){ //the order of supported protocols specifies which one to use first\n";
            functionStr +=	"\t\tvar msg = {method: '" + fctName + "', params:params};\n";
            functionStr += "\t\tthis.sendMQTTMessage(msg, '" + path[keys[i]]["post"]["x-mqtt-topic"] + "')\n";
            functionStr +=  "\t}else{\n"; 
            functionStr += "\t\treturn this.sendHttpRequest(params, '" + keys[i] + "', 'post', '"  + contentType + "');\n" ;
            functionStr += "\t}\n";
            functionStr += "};\n"
        }  
    }

    return functionStr;
};

/**
 * @method addParametersValidation
 * @param {Object} path: a specific path from the path object of a descriptor
 * @param {String} method: the request method that can be used for that path (post, get)
 * @return {Object} code that checks that the required parameters of the generated method are passed correctly
 */
ProxyFactory.prototype.addParametersValidation = function(path, method) {

    var parameters = path[method].parameters; 
    var checkParamStr = "";
    if (parameters) {

        for (var i = 0; i < parameters.length; i++) {

            if (parameters[i].required) {

                checkParamStr += "\tif (!params || !params." + parameters[i].name + 
                    ") throw {errorCode: 'Missing_Parameter', errorDetail: '" + parameters[i].name + 
                    " is required'};\n"
            }
        }
    }

    return checkParamStr;
};

/**
 * Generate a method that makes http calls based on the class name given in the parameter
 * @method generateHttpCaller
 * @param {Object} name: the class name of the proxy
 * @return {String} a sendHttpRequest method for the class specified in the parameter
 */
ProxyFactory.prototype.generateHttpCaller = function(name) {

    var str = name + ".prototype.sendHttpRequest = function(params, path, method, contentType, callback) {\n" +
        "\tvar requestParams = {\n" + 
        "\t\turl: this.httpEndpoint + path" + ",\n" + 
        "\t\tmethod: method,\n" +        
        "\t\theaders: {\n" + 
        "\t\t\t'Authorization': 'Bearer ' + this.token \n" +
        "\t\t}\n" +
        "\t}\n";

    str += "\tif (contentType) {\n" +
        "\t\trequestParams.headers['Content-Type'] = contentType;\n" +
        "\t}\n"; 


    str += "\tif(!callback) {\n" + 
        "\t\tif(contentType == 'application/json') {\n" + 
        "\t\t\trequestParams.bodyString=JSON.stringify(params);\n" +
        "\t\t}else {\n" + 
        "\t\t\trequestParams.params = params;\n" + 
        "\t\t}\n" +
        "\t}else{\n" +
        "\t\tif (!callback.credentials.token) {\n" +
        "\t\t\t throw {errorCode: 'Missing_Parameter', errorDetail: 'token is required'};\n" +
        "\t\t}\n" +
        "\t\tif (!callback.endpoint) {\n" +
        "\t\t\t throw {errorCode: 'Missing_Parameter', errorDetail: 'endpoint is required'};\n" +
        "\t\t}\n" +
        "\t\tif (!callback.servicePath) {\n" +
        "\t\t\t throw {errorCode: 'Missing_Parameter', errorDetail: 'servicePath is required'};\n" +
        "\t\t}\n" +
        "\t\tif (!callback.protocol) {\n" +
        "\t\t\t throw {errorCode: 'Missing_Parameter', errorDetail: 'protocol is required'};\n" +
        "\t\t}\n" +
        "\t\tif(contentType == 'application/json') {\n" + 
        "\t\t\tvar body = {};\n" +
        "\t\t\tfor(var key in params) body[key] = params[key];\n" +
        "\t\t\tfor(var key in callback) body[key] = callback[key];\n" +
        "\t\t\trequestParams.bodyString=JSON.stringify(body);\n" +
        "\t\t}else {\n" + 
        "\t\t\tvar parameters = {};\n" +
        "\t\t\tfor(var key in params) parameters[key] = params[key];\n" +
        "\t\t\tfor(var key in callback) parameters[key] = callback[key];\n" +
        "\t\tif(!parameters.credentials instanceof String) {\n" +
        "\t\t\tparameters.credentials = JSON.stringify(parameters.credentials);\n" +
        "\t\t}\n" +
        "\t\t\trequestParams.params = parameters;\n" +
        "\t\t}\n" +
        "\t}\n";



    str += "\tvar resp = http.request(requestParams);\n" +
        "\tif (resp.status != 200) {\n" + 
        "\t\tthrow JSON.parse(resp.body);\n" +
        "\t}\n" +
        "\tvar body = JSON.parse(resp.body);\n" +
        "\tif(body.response.metadata && body.response.metadata.status == 'failure'){\n" +
        "\t\tthrow body.response;\n" +
        "\t}\n" + 
        "\treturn body;\n" +  
        "};\n";

    return str;
};

/**
 * Generate a method that makes mqtt calls based on the class name and the topic given in the parameters
 * @method generateMQTTCaller
 * @param {String} name: the class name of the proxy
 * @return {String} a sendMQTTMessage method for the class specified in the parameter
 */
ProxyFactory.prototype.generateMQTTCaller = function(name, topic) {

    var str = name + ".prototype.sendMQTTMessage = function(msg, topic, callback) {\n" +
        "\tvar mqttClient = mqtt.getInstance(this.mqttEndpoint, {username:this.username, password:this.password});\n" + 
        "\tif (mqttClient.metadata && mqttClient.metadata.status == 'failure'){\n" +
        "\t\tthrow mqttClient.metadata;\n" +
        "\t}\n" +
        "\tif(!callback) {\n" +
        "\t\tvar resp = mqttClient.publish(topic, JSON.stringify(msg));\n" +
        "\t}else{\n" +
        "\t\tif (!callback.credentials.username || !callback.credentials.password) {\n" +
        "\t\t\t throw {errorCode: 'Missing_Parameter', errorDetail: 'MQTT credentials are required'};\n" +
        "\t\t}\n" +
        "\t\tif (!callback.endpoint) {\n" +
        "\t\t\t throw {errorCode: 'Missing_Parameter', errorDetail: 'endpoint is required'};\n" +
        "\t\t}\n" +
        "\t\tif (!callback.servicePath) {\n" +
        "\t\t\t throw {errorCode: 'Missing_Parameter', errorDetail: 'servicePath is required'};\n" +
        "\t\t}\n" +
        "\t\tif (!callback.protocol) {\n" +
        "\t\t\t throw {errorCode: 'Missing_Parameter', errorDetail: 'protocol is required'};\n" +
        "\t\t}\n" +
        "\t\tvar messageObj = {};\n" +
        "\t\tfor(var key in msg) messageObj[key] = msg[key];\n" +
        "\t\tfor(var key in callback) messageObj[key] = callback[key];\n" +
        "\t\tvar resp = mqttClient.publish(topic, JSON.stringify(messageObj));\n" +
        "\t}\n" +
        "\tif(resp.metadata.status == 'failure'){\n" + 
        "\t\tthrow resp;\n" + 
        "\t}else{\n" +
        "\t\treturn resp;\n" + 
        "\t}\n" +
        "}";

    return str;
};

/**
 * @method saveProxy
 * @param {String} name: the name of the script of the proxy
 * @param {String} proxyDef: the generated code for the proxy
 * @return {Object} success if the script was created
 */
ProxyFactory.prototype.saveProxy = function(name, proxyDef) {

    var data = {
        "apsdb.name": PROXY_FOLDER + name,       
        "apsdb.content": JSON.stringify({
            "ACL": {
                "execute":"authenticated",
                "read":"authenticated",
                "write":"nobody"
            },
            "contentType": SCRIPT_CONTENT_TYPE,
            "content": proxyDef
        })
    };

    var resp = apsdb.callApi("SaveFile", data, null);
    if (resp.metadata.status == "failure") {
        throw resp;
    }

    return resp;
};

/**
 * Extract the endpoints from the "x-servers" object of the descriptor and returns them
 * @method getEnpointsFromDescriptor
 * @param {Object} descriptor: descriptor of the remote service
 * @return {Object} the http and mqtt endpoints
 */
ProxyFactory.prototype.getEnpointsFromDescriptor = function(descriptor) {

    var servers = descriptor["x-servers"];
    var endpoints = {};

    for (var i = 0; i < servers.length; i++) {

        if (servers[i].url.indexOf(HTTP_BASED) > -1) {
            endpoints.http = servers[i].url;
        } 

        if (servers[i].url.indexOf(MQTT_BASED) > -1) {
            endpoints.mqtt = servers[i].url;
        }
    }

    return endpoints;
};