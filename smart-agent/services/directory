var log = require("log"); log.setLevel("info");
var document = require("document");
var constants = require("/smart-agent/common/constants");
var util = require("/smart-agent/common/util");
var proxyFactory = require("smart-agent/services/proxyfactory");
var document = require("document");

const DEFAULT_CONFIG_PATH = "smart-agent/setup/config";
const SERVICE_DESC_SCHEMA = "service_descriptor"; 
const DESC_CHANNEL = "collaboration_topic";
const JSON_FIELDS = ["info", "paths", "securityDefinitions"];
const ARRAY_FIELDS_WITH_JSON = ["x-servers"];
const NODE_ID = "x-node-id";
const MASTER = "master";
const PROXY_FOLDER = "smart-agent/proxies/";

/**
 * Implementation of a directory service, as part of the IoT middleware
 * @class Directory
 * @constructor
 * @param {Object} [config]: optional configuration, if not specified, defaults to the configuration file
 */
function Directory(config) {

    this.config = config ? config : require(DEFAULT_CONFIG_PATH);
}

/**
 * @method register
 * @param {Object} [descriptor] extended OpenAPI descriptor of the service
 * @param {Object} [callback] optional callback to invoke in case of error
 * @param {String} [callback][endpoint]: url (without the protocol) of the callback
 * @param {String} [callback][protocol]: one of "http" or "mqtt"
 * @throw {Error}
 */
Directory.prototype.register = function(descriptor, callback) {

    if (!descriptor) {

        log.error("Directory.register: descriptor " + constants.MISSING_PARAMETER_MSG);
        var error = {

            errorCode: constants.MISSING_PARAMETER_CODE,
            errorDetail: "Directory.register: descriptor " + constants.MISSING_PARAMETER_MSG
        };

        if (callback) {
            callback.invoke(error)    
        }

        throw error;
    }

    //var resp = document.get(descriptor[NODE_ID]);
    //log.info(resp);
    if (this.descriptorExists(descriptor[NODE_ID])){

        throw{

            errorCode: "Duplicate_Descriptor",
            errorDetail: descriptor[NODE_ID] + " is already registered"
        };
    }

    this.addToLocalStorage(descriptor);
    if (this.config.role == MASTER) {

        log.info("register role: " + this.config.role);
        this.broadcastDescriptor(
            {"msgType": "new",
             "payLoad": descriptor
            });
    }else{
        log.info("Directory.register sending descriptor to master");
        this.sendServiceToMaster(descriptor);
    }
};

Directory.prototype.sendServiceToMaster = function(descriptor) {

    if (!descriptor) {
        var error = {

            errorCode: constants.MISSING_PARAMETER_CODE,
            errorDetail: "Directory.sendServiceToMaster: descriptor " + constants.MISSING_PARAMETER_MSG
        };

        throw error;
    }
    try{

        var proxy = new proxyFactory.ProxyFactory();
        var masterProxy = proxy.getMasterAgentProxy(this.config);
        log.info("masterProxy: " + JSON.stringify(masterProxy));

        masterProxy.setRegister({"descriptor": descriptor});
    }catch(exception){

        return exception;
    }
};

/**
 * @method addToLocalStorage
 * @param {Object} [descriptor] extended OpenAPI descriptor of the service
 * @hrow {Error}
 */
Directory.prototype.addToLocalStorage = function(descriptor, callback) {

    if (!descriptor) {

        log.error("Directory.addToLocalStorage: " + constants.MISSING_PARAMETER_MSG);
        var error = {

            errorCode: constants.MISSING_PARAMETER_CODE,
            errorDetail: "Directory.add: " + constants.MISSING_PARAMETER_MSG
        };

        if (callback) {
            callback.invoke(error)    
        }

        throw error;
    }

    var descriptorObj = {

        "meta.schema": SERVICE_DESC_SCHEMA,
        "key": descriptor[NODE_ID]  
    };

    var keys = Object.keys(descriptor);
    for (var i = 0; i < keys.length; i++) {

        var key = keys[i];
        if (JSON_FIELDS.indexOf(key) > -1) {
            descriptorObj[key] = JSON.stringify(descriptor[key])
        }

        if (ARRAY_FIELDS_WITH_JSON.indexOf(key) > -1){

            descriptorObj[key] = [];
            for (var x = 0; x < descriptor[key].length; x++){
                descriptorObj[key].push(JSON.stringify(descriptor[key][x]));
            }
        }

        if (!descriptorObj[key]) {
            descriptorObj[key] = descriptor[key];
        }
    }

    var resp = document.save(descriptorObj);
    if (resp.metadata.status == "failure") {

        var msg = "Directory.addToLocalStorage: failed to save descriptor\n" + JSON.stringify(resp);
        throw {

            errorCode: constants.SAVE_FAILED,
            errorDetail: msg
        };
    }
};

Directory.prototype.descriptorExists = function(key) {

    var resp = document.get(key);
    return resp.result;
};

/**
 * If the current directory service is the master directory, broadcast the descriptor to the subordinate directories
 * @method broadcastDescriptor
 * @param {Object} [descriptor] extended OpenAPI descriptor of the service
 */
Directory.prototype.broadcastDescriptor = function(message) {

    log.info("Directory.broadcastDescriptor message: " + JSON.stringify(message));
    if (!message || !message.msgType || !message.payLoad) {

        log.error("Directory.broadcastDescriptor message: " + constants.MISSING_PARAMETER_MSG);
        var error = {

            errorCode: constants.MISSING_PARAMETER_CODE,
            errorDetail: "Directory.broadcastDescriptor message: " + constants.MISSING_PARAMETER_MSG
        };

        throw error;
    }

    log.info("publishing message");
    publish(DESC_CHANNEL, message);
};

/**
 * If the current directory service is the master directory, broadcast the descriptor to the subordinate directories
 * @method listServices
 * @param {Object} [filter] 
 * @param {String} [filter][nodeId]: optional, when specified, only checks for services belonging to this node id
 * @param {String} [filter][category]: optional, when specified, only returns services of this category
 * @param {String} [filter][protocol]: optional, when specified, only returns services of that support this protocol
 * @param {Number} [filter][pageNumber]: optional, indicates the page number to return when paginating, defaults to 1
 * @param {Number} [filter][resultsPerPage]: optional, indicates the number of documents per page, defaults to 50
 * @param {String} [filter][sortOrder]: optional, can be one of "ASC" or "DESC". If specified, sort by creation date using the specified order
 */
Directory.prototype.listServices = function(filter) {

    var requestParams = {
        query: 'apsdb.schema = "' + SERVICE_DESC_SCHEMA + '"',
        fields: "*"
    };

    if (filter) {

        if (filter.nodeId) {
            requestParams.query += ' and ' + NODE_ID + ' = "' + filter.nodeId + '"';
        }

        if (filter.category) {
            requestParams.query += ' and x-category = "' + filter.category + '"';
        }

        if (filter.protocol) {
            requestParams.query += ' and x-protocols = "' + filter.protocol + '"';
        }

        if (filter.pageNumber) {
            requestParams.pageNumber = filter.pageNumber;
        }

        if (filter.resultsPerPage) {
            requestParams.resultsPerPage = filter.resultsPerPage;
        }

        if (filter.sortOrder && ["ASC, DESC"].indexOf(filter.sortOrder.toUpperCase) > -1) {
            requestParams.sort = "creationDate<date:" +  filter.sortOrder.toUpperCase + ">"
        }
    }

    var resp = document.query(requestParams); 
    if (resp.metadata.status == "failure") {

        var msg = "Directory.listServices: error when querying descriptors\n" + JSON.stringify(resp);
        throw {

            errorCode: constants.QUERY_FAILED,
            errorDetail: msg
        };
    }

    var descriptorList = [];
    for (var i = 0; i < resp.result.documents.length; i++) {

        var descriptorDoc = resp.result.documents[i]; log.info("doc " +  JSON.stringify(descriptorDoc));
        var descriptor = this.hydrate(descriptorDoc);
        descriptorList.push(descriptor);
    }

    return descriptorList;
}

/**
 * @method getService
 * @param {String} service identifier (document key)
 * @return {Object} a service descriptor 
 * @throw {Error}
 */
Directory.prototype.getService = function(key) {

    if (!key) {

        var msg = "Directory.getService: key cannot be null or empty";
        log.error(msg);
        var error = {

            errorCode: constants.MISSING_PARAMETER_CODE,
            errorDetail: msg
        };

        throw error;
    }

    var resp = document.get(key);
    if (resp.metadata.status == "failure") {

        var msg = "Directory.prototype.getService: " + constants.ENTITY_NOT_FOUND + key;
        throw {

            errorCode: constants.ENTITY_NOT_FOUND,
            errorDetail: msg
        };
    }

    return this.hydrate(resp.result);
};

/**
 * Updates document if exists, registers it if it doesn't
 * @method updateService
 * @param {Object} [descriptor] extended OpenAPI descriptor of the service
 */
Directory.prototype.updateService = function(descriptor) {

    log.info("starting Directory.updateService..");
    log.info("from Directory.updateService: " + JSON.stringify(descriptor));

    if (!descriptor) {
        var msg = "Directory.updateService: descriptor " + constants.MISSING_PARAMETER_MSG;
        log.error(msg);
        var error = {

            errorCode: constants.MISSING_PARAMETER_CODE,
            errorDetail: msg
        };

        throw error;
    }
    log.info("node id: " + descriptor[NODE_ID]);
    //log.info("Directory.updateService document.get.result: " + JSON.stringify(document.get(descriptor[NODE_ID]))); //to check
    //   if (!document.get(descriptor[NODE_ID]).result) {
    if(!this.descriptorExists(descriptor[NODE_ID])) {
        log.info("Directory.updatService descriptor id: " + descriptor[NODE_ID]);
        log.info("No descriptor found to update, registering a new one..");
        return this.register(descriptor);
    }

    log.info("Descriptor found, updating..");
    this.addToLocalStorage(descriptor);

    log.info("Directory.updateService descriptor id: " + descriptor[NODE_ID]);
    this.removeProxyFile(descriptor[NODE_ID]);

    if (this.config.role == MASTER) {
        log.info("updateService role: " + this.config.role);
        this.broadcastDescriptor(
            {"msgType": "update",
             "payLoad": descriptor
            });
    }else{
        log.info("Role not master, updating to master descriptor: " + JSON.stringify(descriptor));
        this.updateMaster(descriptor);
    }
};

Directory.prototype.updateMaster = function(descriptor) {

    log.info("Updating master..");
    log.info("Directory.updateMaster descriptor: " + JSON.stringify(descriptor));
    if (!descriptor) {
        var error = {

            errorCode: constants.MISSING_PARAMETER_CODE,
            errorDetail: "Directory.updateMaster: descriptor " + constants.MISSING_PARAMETER_MSG
        };

        throw error;
    }

    try{

        var proxy = new proxyFactory.ProxyFactory();
        var masterProxy = proxy.getMasterAgentProxy(this.config);
        log.info("masterProxy" + JSON.stringify(masterProxy));

        log.info("updateMaster masterProxy: " + JSON.stringify(masterProxy));
        masterProxy.setUpdateService({"descriptor": descriptor});
    }catch(exception){

        return exception;
    }
};

Directory.prototype.removeService = function(key) {

    log.info("Removing service..");
    log.info("Directory.removeService key: " + key);
    if (!key) {

        var msg = "Directory.removeService: key cannot be null or empty";
        log.error(msg);
        var error = {

            errorCode: constants.MISSING_PARAMETER_CODE,
            errorDetail: msg
        };

        throw error;
    }

    //if(!document.get(key).result){
    if(!this.descriptorExists(key)){
        var msg = "No descriptor with " + key + " key";
        log.error(msg);
        return;
    }

    log.info("directory.removeService removing proxy file of key: " + key);
    this.removeProxyFile(key);
    document.delete(key);

    if (this.config.role == MASTER) {
        log.info("removeService role: " + this.config.role);
        this.broadcastDescriptor(
            {"msgType": "delete",
             "payLoad": {
                 NODE_ID: key
             }
            });

    }else{
        log.info("removeService role: " + this.config.role);
        log.info("removing service from master");
        this.removeServiceFromMaster(key);
    }
};

Directory.prototype.removeServiceFromMaster = function(key) {

    if (!key) {
        var error = {

            errorCode: constants.MISSING_PARAMETER_CODE,
            errorDetail: "Directory.removeServiceFromMaster: descriptor key " + constants.MISSING_PARAMETER_MSG
        };

        throw error;
    }
    try{

        var proxy = new proxyFactory.ProxyFactory();
        var masterProxy = proxy.getMasterAgentProxy(this.config);
        log.info("masterProxy: " + JSON.stringify(masterProxy));

        masterProxy.getRemoveService({"id": key});
    }catch(exception){

        return exception;
    }
};

Directory.prototype.removeProxyFile = function(key) {

    try{

        log.info("in removeProxyFile Removing proxy file for key: " + key);
        var proxy = new proxyFactory.ProxyFactory();
        var descriptor = this.getService(key);
        log.info("in removeProxyFile descriptor: " + JSON.stringify(descriptor));
        var className = proxy.getClassNameFromDescriptor(descriptor);
        log.info("Class name: " + className);
        var data = {
            "apsdb.name": PROXY_FOLDER + className + "_module"
        };
        log.info("data: " + JSON.stringify(data));
        var resp = apsdb.callApi("DeleteFile", data, null);

        log.info("removeProxyFile resp.metadata.status: " + resp.metadata.status);
        if (resp.metadata.status == "failure") {
            throw resp;
        }
    }catch(exception){
        log.error(JSON.stringify(exception));
        return exception;
    }
};

/** 
 * Turn a descriptor document into a JSON descriptor (OpenAPI)
 * @method hydrate
 * @param {Object} descriptorDoc: a scriptr.io document that contains a dehydrated (serialized) descriptor 
 * @return {Object}
 */
Directory.prototype.hydrate = function(descriptorDoc) {

    var descriptor = {};
    descriptorDoc = util.removeDocumentMetadata(descriptorDoc);
    var keys = Object.keys(descriptorDoc);
    for (var j = 0; j < keys.length; j++) {

        var key = keys[j];

        if (JSON_FIELDS.indexOf(key) > -1) {
            descriptor[key] = JSON.parse(descriptorDoc[key])
        }

        if (ARRAY_FIELDS_WITH_JSON.indexOf(key) > -1){

            descriptor[key] = [];
            for (var x = 0; x < descriptorDoc[key].length; x++){
                descriptor[key].push(JSON.parse(descriptorDoc[key][x]));
            }
        }

        if (!descriptor[key]) {
            descriptor[key] = descriptorDoc[key];
        }
    }

    return descriptor;
}